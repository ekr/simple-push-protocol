


Network Working Group                                          D. Turner
Internet-Draft                                                   Mozilla
Intended status: Standards Track                          April 29, 2014
Expires: October 31, 2014


                          Simply Push Protocol
                     draft-turner-push-proto-latest

Abstract

   This page describes the protocol used for communication by the
   PushServer and the UserAgent.

   A reference server is available on
   [https://github.com/dougt/go-push-server github].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 31, 2014.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Turner                  Expires October 31, 2014                [Page 1]

Internet-Draft                     SPP                        April 2014


   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008.  The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.

Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  3
   3.  Protocol Overview  . . . . . . . . . . . . . . . . . . . . . .  4
   4.  Considerations . . . . . . . . . . . . . . . . . . . . . . . .  4
   5.  ChannelID, UAIDs and Endpoint  . . . . . . . . . . . . . . . .  5
   6.  Messages . . . . . . . . . . . . . . . . . . . . . . . . . . .  6
     6.1.  Handshake  . . . . . . . . . . . . . . . . . . . . . . . .  6
       6.1.1.  UserAgent -> PushServer  . . . . . . . . . . . . . . .  7
       6.1.2.  PushServer -> UserAgent  . . . . . . . . . . . . . . .  7
     6.2.  Register . . . . . . . . . . . . . . . . . . . . . . . . .  8
       6.2.1.  UserAgent -> PushServer  . . . . . . . . . . . . . . .  8
       6.2.2.  PushServer -> UserAgent  . . . . . . . . . . . . . . .  9
     6.3.  Unregister . . . . . . . . . . . . . . . . . . . . . . . .  9
       6.3.1.  UserAgent -> PushServer  . . . . . . . . . . . . . . . 10
       6.3.2.  PushServer -> UserAgent  . . . . . . . . . . . . . . . 10
     6.4.  Ping . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
       6.4.1.  UserAgent -> PushServer  . . . . . . . . . . . . . . . 11
       6.4.2.  PushServer -> UserAgent  . . . . . . . . . . . . . . . 11
     6.5.  Notification . . . . . . . . . . . . . . . . . . . . . . . 12
       6.5.1.  AppServer -> PushServer  . . . . . . . . . . . . . . . 12
       6.5.2.  PushServer -> AppServer  . . . . . . . . . . . . . . . 12
       6.5.3.  PushServer -> UserAgent  . . . . . . . . . . . . . . . 12
   7.  Synchronization of server and client state . . . . . . . . . . 13
   8.  Achieving reliable delivery  . . . . . . . . . . . . . . . . . 13
   9.  Garbage collection . . . . . . . . . . . . . . . . . . . . . . 13
   10. Alternative communication  . . . . . . . . . . . . . . . . . . 14
   11. Security Considerations  . . . . . . . . . . . . . . . . . . . 14
   12. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 14
   13. Normative References . . . . . . . . . . . . . . . . . . . . . 14








Turner                  Expires October 31, 2014                [Page 2]

Internet-Draft                     SPP                        April 2014


1.  Introduction

   The SimplePush protocol is closely based on [http://
   static.googleusercontent.com/external_content/untrusted_dlcp/
   research.google.com/en/us/pubs/archive/37474.pdf Thialfi: A Client
   Notification Service for Internet-Scale Applications] and makes the
   same delivery guarantees, soft server state and client driven
   recovery.  It is a signaling and not a data carrying system.

   The goal: To notify clients of changes to application server state in
   a reliable manner by ensuring that the client will always eventually
   learn of the latest version of an object for which it has expressed
   interest.

2.  Definitions

   PushServer
      A publicly accessible server that implements the server side of
      the Push Protocol and exposes an HTTP API for AppServer's to
      notify it.

   UserAgent
      A device or program that implements the client side of the Push
      Protocol.

   UAID
      A globally unique UserAgent ID.  Used by the PushServer to
      associate channelIDs with a client.  Stored by the UserAgent, but
      opaque to it.

   Channel
      The flow of information from AppServer through PushServer to
      UserAgent.

   ChannelID
      Unique identifier for a Channel.  Generated by UserAgent for a
      particular application.  Opaque identifier for both UserAgent and
      PushServer.  This MUST NOT be exposed to an application.

   Endpoint
      A REST-ful HTTP URL uniquely associated to a channel.  Requests to
      this URL should update the PushServer state for the channel.  MUST
      be exposed to applications.

   Version
      Monotonically increasing 64-bit integer describing the application
      state.  This holds meaning as a primary key or similar only to the
      AppServer.  The PushServer and UserAgent and App should use this



Turner                  Expires October 31, 2014                [Page 3]

Internet-Draft                     SPP                        April 2014


      only for detecting changes.  MUST be exposed to applications.

   Application
      A program which requires access to push notifications.  The
      UserAgent acts on behalf of applications.

3.  Protocol Overview

   The SimplePush protocol defines how UserAgents and PushServers
   communicate to ensure reliable delivery of the latest version of a
   channel from the PushServer to the UserAgent.

   The SimplePush communication channel is WebSockets, and the wire
   protocol is JSON, with messages defined below.  The WebSocket
   specific HTTP header "Sec-WebSocket-Protocol" MUST be set to
   "push-notification" by the UserAgent.  The PushServer SHOULD reject
   the connection if the header is not set.  (FIXME: MUST/SHOULD
   paradox?)

   All messages MUST use TLS (wss:// protocol for WebSockets).  In
   addition, Endpoints generated by PushServer's MUST use HTTPS URLs.

   The PushServer should maintain a mapping of channelIDs and their
   versions and pushEndpoints.  SimplePush is backed by a best effort
   delivery mechanism over WebSocket

   The protocol has some request-response driven actions, where the
   UserAgent MUST make requests, and the PushServer MAY respond.  One
   message, "notification", MAY be sent at any time by the PushServer.

4.  Considerations

   Since SimplePush is not a data carrying system, there are a few
   things developers should keep in mind.

   1.  _Do not send a SimplePush update message for every bit of
       exchanged data._

   This service is a way for you to wake your remote app and have it
   reconnect back to you.  If it's already connected, sending a
   SimplePush service is wasteful.  (It's a bit like sending a fax to
   make sure the person on the phone got your email.)

   1.  _While it's possible to have more than one Channel per App, it
       helps to be frugal about them._

   Remember, that each Channel has an associated action, and that
   they're not really "free", and they can be lossy.  A single channel



Turner                  Expires October 31, 2014                [Page 4]

Internet-Draft                     SPP                        April 2014


   that allows the system to start your app, or a separate channel that
   advises that a screen widget needs to be updated are all fine uses.
   Having one channel per bullet path for a FPS game is not, since this
   will pretty much guarantee data will be lost.

   1.  _Don't flood the channel._

   Nobody likes having something constantly remind you to do something,
   particularly after you've already done it.  In the same way, be
   conscious that channel updates invoke actions on your user's devices,
   and may lead to users removing your app.  Once your app connects,
   you'll have a far more efficient and faster pipe than SimplePush.

   1.  _Pay attention to endpoint reassignments._

   When a given user's endpoint changes, the previous endpoint is no
   longer valid.  Updates sent to that endpoint will no longer have any
   effect and are a waste of your bandwidth.  If you send a great many
   updates to endpoints that are invalid, the server may have a very
   difficult time determining that you're not being hostile.

5.  ChannelID, UAIDs and Endpoint

   Since the UAID is the only unique identifier of a UserAgent, with no
   authentication information, it is important that UAIDs are not
   compromised.  Only the UserAgent to which the UAID was assigned, and
   the PushServer, should know the UAID.  An attacker can use a leaked
   UAID to pretend to be the UserAgent with that UAID.  Although
   SimplePush does not transfer any private information, the attacker
   would still receive the notifications meant for the victim.  If any
   party detects a compromise, they SHOULD reset the UAID.  For this,
   the UserAgent may send a blank UAID and get a new one from the
   PushServer.  Similarly the PushServer may send a new UAID during a
   handshake.

   ChannelIDs are also unique.  It is RECOMMENDED that channelIDs be
   associated with a UAID, so that an attacker cannot receive
   notifications for a compromised channelID without also having
   accessed the UAID.

   It is REQUIRED that both UAID and channelIDs be UUIDv4 tokens.

   The format of the Endpoint is not specified by this protocol.  There
   are two requirements that MUST be satisfied:

   -  PushServers MUST use HTTPS, so the Endpoint URL will begin with
      "https://".




Turner                  Expires October 31, 2014                [Page 5]

Internet-Draft                     SPP                        April 2014


   -  ChannelIDs and Endpoints MUST have a one-one mapping and Endpoints
      may not 'expire' while their channelID is still active.

   It is RECOMMENDED that Endpoints simply be a prefix followed by the
   channelID or some transformation of the channelID which is
   referentially transparent.  PushServers SHOULD avoid exposing UAIDs
   in the Endpoints since they are sent to AppServers.

6.  Messages

   All messages are encoded as JSON.  All messages MUST have the
   following fields:

   messageType (string)
      Defines the message type

6.1.  Handshake

   After the WebSocket is established, the UserAgent begins
   communication by sending a "hello" message.  The hello message
   contains the UAID if the UserAgent has one, either generated by the
   UserAgent for the first handshake or returned by the server from an
   earlier handshake.  The UserAgent also transmits the channelIDs it
   knows so the server may synchronize its state.

   The server MAY respect this UAID, but it is at liberty to ask the
   UserAgent to change its UAID in the response.

   If the UserAgent receives a new UAID, it MUST delete all existing
   channelIDs and their associated versions.  It MAY then wake up all
   registered applications immediately or at a later date by sending
   them a "push-register" message.

   The handshake is considered ''complete'', once the UserAgent has
   received a reply.

   An UserAgent MUST transmit a "hello" message _only once_ on its
   WebSocket.  If the handshake is not completed in the first try, it
   MUST disconnect the WebSocket and begin a new connection.

   _NOTE:_ Applications may request registrations or unregistrations
   from the UserAgent, before or when the handshake is in progress.  The
   UserAgent MAY buffer these or report errors to the application.  But
   it MUST NOT send these requests to the PushServer until the handshake
   is completed.






Turner                  Expires October 31, 2014                [Page 6]

Internet-Draft                     SPP                        April 2014


6.1.1.  UserAgent -> PushServer

   messageType = "hello"
      Begin handshake

   uaid string (REQUIRED)
      If the UserAgent has a previously assigned UAID, it should send
      it.  Otherwise send an empty string.

   channelIDs list of strings (REQUIRED)
      If the UserAgent has a list of channelIDs it wants to be notified
      of, it must pass these, otherwise an empty list.

   Extra fields: The UserAgent MAY pass any extra JSON data to the
   PushServer.  This data may include information required to wake up
   the UserAgent out-of-band.  The PushServer MAY ignore this data.

6.1.1.1.  Example

     {
       "messageType": "hello",
       "uaid": "fd52438f-1c49-41e0-a2e4-98e49833cc9c",
       "channelIDs": ["431b4391-c78f-429a-a134-f890b5adc0bb",
                      "a7695fa0-9623-4890-9c08-cce0231e4b36"]
     }

6.1.2.  PushServer -> UserAgent

   PushServers MUST only respond to a hello once.  UserAgents MUST
   ignore multiple hello replies.

   messageType = "hello"
      Responses generally have the same messageType as the request

   uaid string (REQUIRED)
      If the UserAgent sent no UAID, generate a new one.  If the
      UserAgent send a valid UAID and the PushServer is in sync with the
      UserAgent, send back the same UAID, otherwise the PushServer
      should generate a new UAID.

6.1.2.1.  Example

     {
       "messageType": "hello",
       "uaid": "fd52438f-1c49-41e0-a2e4-98e49833cc9c"
     }





Turner                  Expires October 31, 2014                [Page 7]

Internet-Draft                     SPP                        April 2014


6.2.  Register

   The Register message is used by the UserAgent to request that the
   PushServer notify it when a channel changes.  Since channelIDs are
   associated with only one UAID, this effectively creates the channel,
   while unregister destroys the channel.

   The channelID is chosen by the UserAgent because it also acts like a
   nonce for the Register message itself.  Because of this PushServers
   MAY respond out of order to multiple register messages or messages
   may be lost without compromising correctness of the protocol.

   The request is considered successful only after a response is
   received with a status code of 200.  On success the UserAgent MUST:

   -  Update its persistent storage based on the response

   -  Notify the application of a successful registration.

   -  On error, the UserAgent MUST notify the application as soon as
      possible.

   NOTE: The register call is made by the UserAgent on behalf of an
   application.  The UserAgent SHOULD have reasonable timeouts in place
   so that the application is not kept waiting for too long if the
   server does not respond or the UserAgent has to retry the connection.

6.2.1.  UserAgent -> PushServer

   messageType = "register"
      registering

   channelID string (REQUIRED)
      A unique identifier generated by the UserAgent, distinct from any
      existing channelIDs it has registered.  It is RECOMMENDED that
      this is a UUIDv4 token.

6.2.1.1.  Example

     {
       "messageType": "register",
       "channelID": "d9b74644-4f97-46aa-b8fa-9393985cd6cd"
     }








Turner                  Expires October 31, 2014                [Page 8]

Internet-Draft                     SPP                        April 2014


6.2.2.  PushServer -> UserAgent

   messageType = "register"
      registering

   channelID string (REQUIRED)
      This MUST be the same as the channelID sent by the UserAgent in
      the register request that this message is a response to.

   status number (REQUIRED)
      Used to indicate success/failure.  MUST be one of: * 200 - OK.
      Success.  Idempotent: If the PushServer receives a register for
      the same channelID from a UserAgent which already has a
      registration for the channelID, it should still respond with
      success. * 409 - Conflict.  The chosen ChannelID is already in use
      and NOT associated with this UserAgent.  UserAgent SHOULD retry
      with a new ChannelID as soon as possible. * 500 - Internal server
      error.  Database out of space or offline.  Disk space full or
      whatever other reason due to which the PushServer could not grant
      this registration.  UserAgent SHOULD avoid retrying immediately.

   pushEndpoint string (REQUIRED)
      Should be the URL sent to the application by the UserAgent.
      AppServers will contact the PushServer at this URL to update the
      version of the channel identified by channelID.

6.2.2.1.  Example

     {
       "messageType": "register",
       "channelID": "d9b74644-4f97-46aa-b8fa-9393985cd6cd",
       "status": 200,
       "pushEndpoint": "http://pushserver.example.org/d9b74644"
     }

6.3.  Unregister

   Unregistration is an optional procedure.

   PushServers MUST support it.  UserAgents SHOULD support it.

   The unregister is required only between the App and the UserAgent, so
   that the UserAgent stops notifying the App when the App is no longer
   interested in a pushEndpoint.

   The unregister is also useful to the AppServer, because it should
   stop sending notifications to an endpoint the App is no longer
   monitoring.  Even then, it is really an optimization so that the



Turner                  Expires October 31, 2014                [Page 9]

Internet-Draft                     SPP                        April 2014


   AppServer need not have some sort of garbage collection mechanism to
   clean up endpoints at intervals of time.

   The PushServer MUST implement unregister, but need not rely on it.
   Well behaved AppServers will stop notifying it of unregistered
   endpoints automatically.  Well behaved UserAgents won't notify their
   apps of unregistered updates either.  So the PushServer can continue
   to process notifications and pass them on to UserAgents, when it has
   not been told about the unregistration.

   When an App calls "unregister(endpoint)" it is RECOMMENDED that the
   UserAgent follow these steps:

   -  Remove its local registration first, for example from the
      database.  This will allow it to immediately start ignoring
      updates.

   -  Notify the App that unregistration succeeded.

   -  Fire off an unregister message to the PushServer

6.3.1.  UserAgent -> PushServer

   messageType = "unregister"
      unregistering

   channelID string (REQUIRED)
      This is sort of obvious isn't it? :)

6.3.1.1.  Example

     {
       "messageType": "unregister",
       "channelID": "d9b74644-4f97-46aa-b8fa-9393985cd6cd"
     }

6.3.2.  PushServer -> UserAgent

   messageType = "unregister"
      unregistering

   channelID string (REQUIRED)
      This MUST be the same as the channelID sent by the UserAgent in
      the unregister request that this message is a response to.







Turner                  Expires October 31, 2014               [Page 10]

Internet-Draft                     SPP                        April 2014


   status number (REQUIRED)
      Used to indicate success/failure.  MUST be one of: * 200 - OK.
      Success.  Idempotent: If the PushServer receives a unregister for
      a non-existent channelID it should respond with success.  If the
      channelID is associated with a DIFFERENT UAID, it MUST NOT delete
      the channelID, but still MUST respond with success to this
      UserAgent. * 500 - Internal server error.  Database offline or
      whatever other reason due to which the PushServer could not grant
      this unregistration.  UserAgent SHOULD avoid retrying immediately.

6.3.2.1.  Example

     {
       "messageType": "unregister",
       "channelID": "d9b74644-4f97-46aa-b8fa-9393985cd6cd",
       "status": 200
     }

6.4.  Ping

   The connection to the Push Server may be lost due to network issues.
   When the UserAgent detects loss of network, it should reconnect.
   There are situations in which the TCP connection dies without either
   end discovering it immediately.  The UserAgent should send a ping
   approximately every 30 minutes andexpect a reply from the server in a
   reasonable time (The Mozilla UserAgent uses 10 seconds).  If no data
   is received, the connection should be presumed closed and a new
   connection started.

   The UserAgent should consider normal communications as an indication
   that the socket is working properly.  It SHOULD send the ping packet
   only if no activity has occurred in the past 30 minutes.

6.4.1.  UserAgent -> PushServer

   The 2-character string "{}" is sent.  This is a valid JSON object
   that requires no alternative processing on the server, while keeping
   transmission size small.

6.4.2.  PushServer -> UserAgent

   The PushServer may reply with any data.  The UserAgent is only
   concerned about the state of the connection.  The PushServer may
   deliver pending notifications or other information.  If there is no
   pending information to be sent, it is RECOMMENDED that the PushServer
   also reply with the string "{}".





Turner                  Expires October 31, 2014               [Page 11]

Internet-Draft                     SPP                        April 2014


6.5.  Notification

6.5.1.  AppServer -> PushServer

   The AppServer MUST make a HTTP _PUT_ request to the Endpoint received
   from the App.

   If no request body is present, the server MAY presume the version to
   be the current server UTC.

   If the request body is present, the request MUST contain the string
   "version=N" and the Content-Type MUST be
   "application/x-www-form-urlencoded".

6.5.2.  PushServer -> AppServer

   The HTTP response status code indicates if the request was
   successful.

   -  200 - OK.  The PushServer will attempt to deliver a notification
      to the associated UserAgent.

   -  500 - Something went wrong with the server.  Rare, but the
      AppServer should try again.

   The HTTP response body SHOULD be empty.

6.5.3.  PushServer -> UserAgent

   Notifications are _acknowledged_ by the UserAgent.  PushServers
   should retry unacknowledged notifications every 60 seconds.  If the
   version of an unacknowledged notification is updated, the PushServer
   MAY queue up a new notification for this channelID and the new
   version, and remove the old notification from the pending queue.

   messageType: "notification"
      notification

   updates list  REQUIRED
      The list contains one or more {"channelID": "id", "version": N }
      pairs.










Turner                  Expires October 31, 2014               [Page 12]

Internet-Draft                     SPP                        April 2014


6.5.3.1.  Example

     {
       "messageType": "notification",
       "updates": [
         { "channelID": "431b4391-c78f-429a-a134-f890b5adc0bb",
           "version": 23 },
         { "channelID": "a7695fa0-9623-4890-9c08-cce0231e4b36",
           "version": 42 } ]
     }

6.5.3.2.  UserAgent -> PushServer

   It is RECOMMENDED that the UserAgent try to batch all pending
   acknowledgements into fewer messages.

   messageType ="ack"
      ack

   updates list
      The list contains one or more {"channelID": channelID, "version":
      N} pairs.

6.5.3.2.1.  Example

     {
       "messageType": "ack",
       "updates": [
          { "channelID": "431b4391-c78f-429a-a134-f890b5adc0bb",
            "version": 23 },
          { "channelID": "a7695fa0-9623-4890-9c08-cce0231e4b36",
            "version": 42 } ]
     }

7.  Synchronization of server and client state

8.  Achieving reliable delivery

   At any time, if the PushServer reaches an inconsistent condition, due
   to database failure, network failure, or any other reason, it MAY
   drop all state.  It MUST then disconnect all active clients, forcing
   them to reconnect and begin a handshake to get synchronized.

9.  Garbage collection

   The PushServer MAY perform occasional garbage collection to reduce
   its disk/memory usage.  UserAgents that have not contacted the
   PushServer for a long period of time (a few days.  TODO decide



Turner                  Expires October 31, 2014               [Page 13]

Internet-Draft                     SPP                        April 2014


   minimum) are eligible for garbage collection.  To do this, the
   PushServer simply deletes the UAID and all associated ChannelIDs and
   other associated data (including versions and Endpoints).  The
   deletion of the UAID should be done first, and ''atomically''.  Other
   details may be deleted when the server has spare cycles.  Now if the
   UserAgent with said UAID connects to the PushServer, it will be
   assigned a new UAID, the handshake will occur and Apps on the server
   will learn the latest version (TODO: really need NotifyUnknown!)

   The PushServer MUST NOT delete channelIDs without deleting the
   associated UAID, except when one of the following occurs:

   -  The UserAgent explicitly sends an unregister message.

   -  or, When a previously known UserAgent reconnects, in the handshake
      it will transmit channelIDs which are registered on the
      UserAgent's side.  If the PushServer finds that it has
      registrations for channelIDs that are not in the list transmitted
      by the UserAgent, it may delete these extra channelIDs.

10.  Alternative communication

   In environments or devices where maintaining an always alive
   WebSocket is difficult, UserAgents and PushServers MAY implement
   alternative means to notify UserAgents about updates.  This out of
   band notification SHOULD be restricted to request the UserAgent to
   establish the WebSocket.  SimplePush state SHOULD NOT be transmitted
   out of band, since reliable delivery may not be guaranteed.

11.  Security Considerations

   [TODO]

12.  IANA Considerations

   [TODO]

13.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.










Turner                  Expires October 31, 2014               [Page 14]

Internet-Draft                     SPP                        April 2014


Author's Address

   Douglas Turner II
   Mozilla

   EMail: dougt@mozilla.com













































Turner                  Expires October 31, 2014               [Page 15]

